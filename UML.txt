Pics generated at www.planttext.com/planttext
Text used to generate the art is below.

---------------------------------------

Basic class diagram

@startuml

title Relationships 

class DataManager
class XBeeCommManager

package SQL <<database>> {
  class db
}

package XBee <<node>> {
  class Device
}

package XBeeManagers <<frame>> {
  abstract class XBeeUnitManager
  class CoordinatorManager
  class RemoteXBeeManager {
    One RemoteXBeeManager
    per remote sensor device
  }
}  

CoordinatorManager -up-> XBeeUnitManager
RemoteXBeeManager -up-> XBeeUnitManager
XBeeCommManager *-- PortService
XBeeCommManager *-- MessageFactory
XBeeCommManager -- XBeeManagers
XBeeManagers -down- DataManager
DataManager *-- SQLConnector
SQLConnector *-- SQL
PortService -down- XBee

Hide members 
Hide db circle
Hide Device circle
show RemoteXBeeManager fields

@enduml

---------------------------------------

I/O Sequence Diagram:


@startuml

title "I/O from XBee"

actor XBeePort

Box "XBeeCommManager\nThread"
  participant XBeeCommManager
  participant PortService
  participant MessageFactory
end box

Box "Handler's\nThread"
  participant RegisteredHandler
  participant DataManager
  participant SQLConnector
end box

Note over DataManager
  DataManager and SQLConnector are
  thread-safe; called from many threads
end note

XBeePort --> PortService : UART
PortService --> MessageFactory : Create Message
PortService <-- MessageFactory : Message
PortService --> RegisteredHandler : Message over\nthreadQueue
RegisteredHandler --> RegisteredHandler : Process Message

alt IO Sample

    RegisteredHandler --> DataManager : update DB
    DataManager --> SQLConnector : update DB
    SQLConnector --> MySQL

else Config 

    XBeeCommManager <-- RegisteredHandler : Message over\nthreadQueue
    PortService <-- XBeeCommManager
    XBeePort <-- PortService : write() to port

end

@enduml


